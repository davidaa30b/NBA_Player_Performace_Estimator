# Generated by Django 5.1.4 on 2025-01-29 17:32

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('abbreviation', models.CharField(max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='PlayerSeason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='performance_estimator.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='performance_estimator.team')),
            ],
        ),
        migrations.CreateModel(
            name='GameLogPlayerGeneralStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField()),
                ('number', models.IntegerField()),
                ('date', models.DateField()),
                ('age', models.CharField(max_length=12)),
                ('team', models.CharField(max_length=100)),
                ('location', models.BooleanField(default=True)),
                ('opponent', models.CharField(max_length=100)),
                ('margin', models.CharField(max_length=50)),
                ('started', models.BooleanField()),
                ('minutes_played', models.CharField(max_length=50)),
                ('field_goals', models.IntegerField()),
                ('field_goals_attempted', models.IntegerField()),
                ('field_goal_percentage', models.FloatField()),
                ('three_pointers', models.IntegerField()),
                ('three_pointers_attempted', models.IntegerField()),
                ('three_pointers_percentage', models.FloatField()),
                ('free_throws', models.IntegerField()),
                ('free_throws_attempted', models.IntegerField()),
                ('free_throw_percentage', models.FloatField()),
                ('offensive_rebounds', models.IntegerField()),
                ('defensive_rebounds', models.IntegerField()),
                ('total_rebounds', models.IntegerField()),
                ('assists', models.IntegerField()),
                ('steals', models.IntegerField()),
                ('blocks', models.IntegerField()),
                ('turnovers', models.IntegerField()),
                ('personal_fouls', models.IntegerField()),
                ('points', models.IntegerField()),
                ('game_score', models.FloatField()),
                ('plus_minus', models.CharField(max_length=50)),
                ('season', models.IntegerField(default=2024)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gamelogplayergeneralstats', to='performance_estimator.playerseason')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GameLogPlayerAdvancedStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField()),
                ('number', models.IntegerField()),
                ('date', models.DateField()),
                ('age', models.CharField(max_length=12)),
                ('team', models.CharField(max_length=100)),
                ('location', models.BooleanField(default=True)),
                ('opponent', models.CharField(max_length=100)),
                ('margin', models.CharField(max_length=50)),
                ('started', models.BooleanField()),
                ('minutes_played', models.CharField(max_length=50)),
                ('true_shooting_percentage', models.FloatField()),
                ('effective_field_goal_percentage', models.FloatField()),
                ('offensive_rebound_percentage', models.FloatField()),
                ('defensive_rebound_percentage', models.FloatField()),
                ('total_rebound_percentage', models.FloatField()),
                ('assist_percentage', models.FloatField()),
                ('steal_percentage', models.FloatField()),
                ('block_percentage', models.FloatField()),
                ('turnover_percentage', models.FloatField()),
                ('usage_rate', models.FloatField()),
                ('offensive_rating', models.FloatField()),
                ('defensive_rating', models.FloatField()),
                ('game_score', models.FloatField()),
                ('plus_minus', models.CharField(max_length=50)),
                ('season', models.IntegerField(default=2024)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gamelogplayeradvancedstats', to='performance_estimator.playerseason')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='player',
            name='teams',
            field=models.ManyToManyField(through='performance_estimator.PlayerSeason', to='performance_estimator.team'),
        ),
        migrations.CreateModel(
            name='TeamGameLogAdvancedStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField()),
                ('number', models.IntegerField()),
                ('date', models.DateField()),
                ('location', models.BooleanField(default=True)),
                ('opponent', models.CharField(max_length=100)),
                ('win_loss_result', models.CharField(max_length=2)),
                ('team_points', models.IntegerField()),
                ('opponents_points', models.IntegerField()),
                ('offensive_rating', models.FloatField()),
                ('defensive_rating', models.FloatField()),
                ('pace', models.FloatField()),
                ('free_throw_attempt_rate', models.FloatField()),
                ('three_point_attempt_rate', models.FloatField()),
                ('true_shooting_percentage', models.FloatField()),
                ('total_reboound_percentage', models.FloatField()),
                ('assist_percentage', models.FloatField()),
                ('steal_percentage', models.FloatField()),
                ('block_percentage', models.FloatField()),
                ('offensive_effective_field_goal_percentage', models.FloatField()),
                ('offensive_turnover_percentage', models.FloatField()),
                ('offensive_rebound_percentage', models.FloatField()),
                ('offensive_free_throws_per_field_goal_attempt_percentage', models.FloatField()),
                ('defensive_effective_field_goal_percentage', models.FloatField()),
                ('defensive_turnover_percentage', models.FloatField()),
                ('defensive_rebound_percentage', models.FloatField()),
                ('defensive_free_throws_per_field_goal_attempt_percentage', models.FloatField()),
                ('season', models.IntegerField(default=2024)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teamgamelogadvancedstats', to='performance_estimator.team')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeamGameLogGeneralStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField()),
                ('number', models.IntegerField()),
                ('date', models.DateField()),
                ('location', models.BooleanField(default=True)),
                ('opponent', models.CharField(max_length=100)),
                ('win_loss_result', models.CharField(max_length=2)),
                ('team_points', models.IntegerField()),
                ('opponents_points', models.IntegerField()),
                ('team_field_goals', models.IntegerField()),
                ('team_field_goals_attempted', models.IntegerField()),
                ('team_field_goal_percentage', models.FloatField()),
                ('team_three_pointers', models.IntegerField()),
                ('team_three_pointers_attempted', models.IntegerField()),
                ('team_three_pointers_percentage', models.FloatField()),
                ('team_free_throws', models.IntegerField()),
                ('team_free_throws_attempted', models.IntegerField()),
                ('team_free_throw_percentage', models.FloatField()),
                ('team_offensive_rebounds', models.IntegerField()),
                ('team_total_rebounds', models.IntegerField()),
                ('team_assists', models.IntegerField()),
                ('team_steals', models.IntegerField()),
                ('team_blocks', models.IntegerField()),
                ('team_turnovers', models.IntegerField()),
                ('team_personal_fouls', models.IntegerField()),
                ('opponent_field_goals', models.IntegerField()),
                ('opponent_field_goals_attempted', models.IntegerField()),
                ('opponent_field_goal_percentage', models.FloatField()),
                ('opponent_three_pointers', models.IntegerField()),
                ('opponent_three_pointers_attempted', models.IntegerField()),
                ('opponent_three_pointers_percentage', models.FloatField()),
                ('opponent_free_throws', models.IntegerField()),
                ('opponent_free_throws_attempted', models.IntegerField()),
                ('opponent_free_throw_percentage', models.FloatField()),
                ('opponent_offensive_rebounds', models.IntegerField()),
                ('opponent_total_rebounds', models.IntegerField()),
                ('opponent_assists', models.IntegerField()),
                ('opponent_steals', models.IntegerField()),
                ('opponent_blocks', models.IntegerField()),
                ('opponent_turnovers', models.IntegerField()),
                ('opponent_personal_fouls', models.IntegerField()),
                ('season', models.IntegerField(default=2024)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teamgameloggeneralstats', to='performance_estimator.team')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeamSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('location', models.BooleanField(default=True)),
                ('opponent', models.CharField(max_length=100)),
                ('season', models.IntegerField(default=2024)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teamschedule', to='performance_estimator.team')),
            ],
        ),
    ]
